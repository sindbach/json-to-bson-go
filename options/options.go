package options

// Options defines internal struct for options
type Options struct {
	structName          string
	minimizeIntegerSize *bool
	truncateIntegers    *bool
}

// NewOptions constructs
func NewOptions() *Options {
	return &Options{}
}

// SetStructName specifies the name of the generated struct. The default value
// is "AutoGenerated".
func (op *Options) SetStructName(name string) *Options {
	op.structName = name
	return op
}

// SetMinimizeIntegerSize specifies how JSON numbers should be represented in Go types.
//
// If false, numbers in JSON input will always be represented as float64 in structs.
//
// If true, JSON numbers will be represented using either int32, int64, float32, or float64. For example, the JSON field
// "x: 100" would be converted to the struct field "X int32" while "x: 2^32 + 10" would be converted to "X int64"
// because (2^32 + 10) overflows int32.
//
// The default is true.
func (op *Options) SetMinimizeIntegerSize(min bool) *Options {
	op.minimizeIntegerSize = &min
	return op
}

// SetTruncateIntegers specifies whether or not integer fields in generated structs should have the "truncate" BSON
// struct tag. This tag enables non-integer data to be decoded into the integer field at the risk of loss of precision.
//
// For example, if this option is true and SetMinimizeIntegerSize is true, the JSON field "x: 1.0" would be converted to
// struct field "X int32 `bson:"x,truncate"`", which would allow data like "x: 5.4" to be decoded into the struct.
//
// This option is a no-op if SetMinimizeIntegerSize(false) is also called because in that case, all numeric JSON fields
// are converted to float64 and the "truncate" tag is not meaningful for that type.
//
// The default value is false.
func (op *Options) SetTruncateIntegers(truncate bool) *Options {
	op.truncateIntegers = &truncate
	return op
}

// StructName is a getter for structName value
func (op *Options) StructName() string {
	name := op.structName
	if name == "" {
		name = "AutoGenerated"
	}
	return name
}

// MinimizeIntegerSize is a getter for minimizeIntegerSize value
func (op *Options) MinimizeIntegerSize() bool {
	min := true
	if op.minimizeIntegerSize != nil {
		min = *op.minimizeIntegerSize
	}
	return min
}

// TruncateIntegers is a getter for trucateIntegers value
func (op *Options) TruncateIntegers() bool {
	var truncate bool
	if op.truncateIntegers != nil {
		truncate = *op.truncateIntegers
	}
	return truncate
}
